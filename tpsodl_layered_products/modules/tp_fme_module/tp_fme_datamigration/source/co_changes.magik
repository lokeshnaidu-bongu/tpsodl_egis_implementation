_pragma(classify_level=advanced, topic={dm_installer}, usage={subclassable})
_method dm_datamodel_implementer.dataset_path
	##
	## Return a string specifying the directory path controlling
	## where the new dataset files are to be created.
	##
	>> system.pathname_up(system.getenv("sw_session_ace_db_dir"))
	#	>> _self.property(:dataset_path)
_endmethod
$


_pragma(classify_level=basic, topic={EO, APE})
_private _method eo_accurate_point_mixin.check_not_inside_other_accurate_point ( geom )
	## 
	## Raise a condition if GEOM is inside another accurate point.
	##
	## E.g. an accurate point is inside the extent of a
	## substation.
	##

	accurate_point << geom.rwo

	accurate_points << eo_ape_structure_manager.accurate_points_interacting_with ( geom, geom.source_view )
	_for other_accurate_point _over accurate_points.fast_elements()
	_loop
		_if other_accurate_point ~= accurate_point
		_then
			_if (accurate_point.source_collection.name _is :sub_substation _andif other_accurate_point.source_collection.name _is :sub_substation)
			_then
			
			_elif _not (accurate_point.source_collection.name _is :sub_substation _andif other_accurate_point.source_collection.name _is :ed_cabinet) _orif (accurate_point.source_collection.name _is :ed_cabinet _andif other_accurate_point.source_collection.name _is :sub_substation)
			_then
				
#				condition.raise ( :eo_accurate_point_interacts_with_other_accurate_point,
#						  :accurate_point1, accurate_point.external_name, :accurate_point2, other_accurate_point.external_name )
				
c
			_endif 
		_endif 
	_endloop 	
_endmethod
$

_pragma(classify_level=restricted, topic={case}, usage={external})
_method case_enumerator.add_values( map_val, enum_val, full? )

	## Add an enumerator
	##
	## MAP_VAL  - STRING  - stored value
	## ENUM_VAL - STRING  - enumerated value
	## FULL?    - BOOLEAN - indicates whether rigorous checks are
	##                      to be run.
	##                      When loading an archive, it is assumed
	##                      that these are not required.
	##                      When loading from the editor, the
	##                      method compares evaluated values 
	##                      This has CONSIDERABLE PERFORMANCE IMPACT
	##                      for enumerators with many values.
	##
	## If an enumerator already exists with either of these values
	## then the insert will fail
	##
	## Returns true if the enumerator was added or false if anything went wrong
	## In the latter case, it also returns a message id indicating
	## the nature of the failure.
	## Note, this message_id is used by the calling class so it
	## must be a message in the calling class i.e. case_enumerator_editor

	v << _self.source_view
	ft << _self.field_type
	ft_class << v.get_field_type(ft.storage_class).class
	d_class << v.make_value_for(_self.domain_class)

	_if map_val.trim_spaces() = ""
	_then
		_return _false, :no_map_val
	_endif

	_if full? 
	_then 
		map_val << _self.figure_storage_string(map_val, ft_class)
		enum_val << _self.figure_storage_string(enum_val, d_class)
	_endif

	_if (map_val_class << v.make_value_for(map_val)) _is _unset
   	_then
		_return _false,:bad_map_value
	_endif 

	# Check that the map value lies in the domain of the storage class
	check_ft << v.get_field_type( ft.storage_class )
	_if _not check_ft.value_in_my_domain?( map_val_class )
	_then
		_return _false,:map_value_is_wrong_class
	_endif
	
	_if _not dd_field_type.compatible_classes?(map_val_class,ft_class) _orif
	    (ft.size _isnt _unset _andif map_val_class.size > ft.size)
	_then
		_return _false,:map_value_is_wrong_class
	_endif

	# Now do the same thing for the domain class
	_if (enum_val_class << v.make_value_for(enum_val)) _is _unset
   	_then
		_return _false,:bad_enum_value
	_endif 

	_if d_class _is _unset _orif
	    _not d_class.is_class_of?(enum_val_class)
	_then
		_return _false,:enumerator_value_is_wrong_class
	_endif

	# If we have unit_values check that the units are of the same dimensionality
	_if d_class.responds_to?(:unit) _andif
	    enum_val_class.dimensionality ~= d_class.dimensionality
	_then
		_return _false,:enumerator_value_is_wrong_dimensionality
	_endif
	
	# Now enum_val and map_val are ok, so add them
	_if _self.val_id _is 0
	_then
		_self.val_id << _self.get_val_id(v)
	_endif

	enum_table << _self.enum_vals_table
	my_val_id << _self.val_id

	_if full?
	_then
		# Be more rigorous here. As I store the string
		# not the value, I need to go through checking the real values
		# of the map_val against my new map val ( Note booleans go through
		# in hundreds of ways e.g true, True, True....
		_for an_fv_rec _over _self.field_vals.fast_elements()
		_loop
			_if v.make_value_for(an_fv_rec.map_val) = map_val_class
			_then
				_return _false,:map_val_already_used
			_endif 
			_if v.make_value_for(an_fv_rec.value) = enum_val_class
			_then
				_return _false,:enum_val_already_used
			_endif 
		_endloop
	_endif
	
	# Check we do not already have an enumerator with this map_val
	_if enum_table.at( my_val_id, map_val ) _isnt _unset
	_then
		write(":map_val_already_used  ", my_val_id, map_val)
		_return _true 
	       # _return _false,:map_val_already_used
	_endif
		
	# Check we do not already have an enumerator with this enum_val
	pred << predicate_and.new( predicate.eq(:val_id, my_val_id),
				   predicate.eq(:value, enum_val) )
	_if _not enum_table.select(pred).empty?
	_then
	        #_return _false,:enum_val_already_used

		_return _true 
	_endif

	new_rec << enum_table.new_at( my_val_id, map_val )
	new_rec.value << enum_val

	_self.field_type.inform_fields_of_extension()

	>> _true
	
_endmethod
$

_pragma(classify_level=advanced, usage={redefinable})
_method cseb_fpi.style_subcode_metadata
	##
	## Return a property_list of the form key=field name, element=multiplier,
	## used in the generation of the style_subcode value.
	##
	_return property_list.new_with(
			#:fixture_usage, 1000,
			:status, 1
			)
_endmethod
$

_pragma(classify_level=restricted)
## Updates to the mapping of the domains and its values for the
## eo_asset_phase tables. 
eo_extensible_db_implementer.define_shared_constant(
	:v5_eo_phase_domain_mapping,
	property_list.new_with(:eo_equipment_unit,
			       rope.new_with("R" ,
					     "Y" ,
					     "B" ,
					     "Unknown" ),
			       :eo_wire,
			       rope.new_with("R" ,
					     "Y" ,
					     "B" ,
					     "Earth" ,
					     "Neutral",
					     "Neutral-Earth",
					     "Unknown"),
			       :eo_cable,
			       rope.new_with("R" ,
					     "Y" ,
					     "B" ,
					     "Earth" ,
					     "Neutral",
					     "Neutral-Earth",
					     "Unknown"),
			       :eo_connector_segment,
			       rope.new_with("R" ,
					     "Y" ,
					     "B" ,
					     "Earth",
					     "Neutral",
					     "Neutral-Earth",
					     "Unknown"),
			       :shareable_phase,
			       rope.new_with("Earth",
					     "Neutral",
					     "Neutral-Earth")
		      ),
	:public )
$

_pragma(classify_level=restricted)
##
## Define eo_cable domain values
##
eo_extensible_db_implementer.define_shared_constant(:eo_cable_domain_v3,
	                               {"R","Y","B","Neutral","Earth",
					"Neutral-Earth","RN","YN","BN",
					"RNE","YNE","BNE","RY","YB","RB",
					"RYN","YBN","RBN","RYNE","YBNE",
					"RBNE","RYB","RYBN","RYBNE"},
:private)
$


_pragma(classify_level=restricted)
##
## Define eo_wire domain values
##
eo_extensible_db_implementer.define_shared_constant(:eo_wire_domain_v3,
	                               {"R","Y", "B", "Neutral",
					"Earth", "Neutral-Earth"},
:private)
$

_block
	ev<<gis_program_manager.cached_dataset(:electric)
	ev.switch(:write)
	ev.dd_types[:eo_phase].enumerator.add_pairs_from({200, "YN"})
	ev.dd_types[:eo_phase].enumerator.add_pairs_from({210, "BN"})
	ev.commit()
	ev.switch(:read_only)
_endblock
