
#% text_encoding = iso8859_1
########################################################################
##
## TPSODL EIS Implementation Project
##
## Created By: Haritha, TCS
## Date: 28/03/2021
##
## Description: Block to Perform Down Stream from Connector
## Point LV with Voltage 11.000 Kv till Service Point and
## Identify Connector Point Installation with Network Type LV
## & Voltage 240.000 V / 415.000 V, Then with same Network Type
## and Voltage, Script will Insert Circuit and  Circuit
## Source with Asset (Connector Point Inst ) and Circuit
## Circuit ID Nomenclature -
## SEC 10 - PSS Substaton (Field- PSS Code)
## F01 - Substation - Incomming Conductor (Field- Feeder Code) 
## D001- DSS Substation (Field- DTR Code)
## A - Outgoing Conductor(Field - Lt Ckt Number)
## Example : LT NEW CKT ID : SCE10-F01-001-A
## Example : HT NEW CKT ID : SCE10-F01 (Substation Code-
## Incomming Feeder Code)

########################################################################

remex(:tp_circuit_builder_engine)
# Note: pragma is compulsory for all the defined methods, slot access, properties and shared constant. 
_pragma(classify_level=basic, usage={tp_circuit_builder_engine})
def_slotted_exemplar(:tp_circuit_builder_engine,
	## 
	## 
	## 
	{
		{:custom_args,_unset},
		{:view,_unset}
	},
	:engine_model)
$

#--------------------------------------------------------------------------------
#
#   D E F I N E   L O C A L   M E T H O D S
#
_pragma(classify_level=basic, usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.new()
	## 
	## 
	_return _clone.init()
	
_endmethod
$

_pragma(classify_level=basic, usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.init()
	## Description: Initialises self's slots and returns self
	## 
	## Parameters : As required by the super implemenation
	## 
	## Returns    : The instance of the plugin
	
        #--- CREATES INSTANCE FOR SLOTS ---
	_super.init()
	.custom_args << property_list.new()
	_dynamic !current_coordinate_system!
	!current_coordinate_system! << smallworld_product.application(:tp_eo_application).coordinate_system

	.view << gis_program_manager.databases[:electric]
	_return _self
	
_endmethod
$
_pragma(classify_level=basic, usage={tp_circuit_builder_engine})
##
## To provide slot access to the slot 'custom_args'
##
tp_circuit_builder_engine.define_slot_access(:custom_args,:writable,:public)          
	
$
_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
##
## To provide slot access to the slot 'view'
##
tp_circuit_builder_engine.define_slot_access(:view,:readable,:public)
$
_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.build_feeder_network(circuit_sources,
						       circuit_coll,
						       circuit_list,
						       circuit_handle,
						       _optional p_circuit_dialog)
	## 
	##To build the circuit based on the network type's
	.custom_args[:circuit_dialog] << p_circuit_dialog
	.custom_args[:circuit_dialog].add_to_log(_self.message(:started)+date_time.now().write_string)
	.custom_args[:circuit_handle] << circuit_handle
	.custom_args[:circuit_list] << circuit_list
	.custom_args[:cir_coll] << circuit_coll
	.custom_args[:cir_sources] << circuit_sources
	.custom_args[:start_time] << date_time.now()
	_local l_ckt_engine << eo_circuit_builder_engine.new()
	_local l_ckt_src,l_ckt_list

	_if (l_ckt_src << .custom_args[:cir_sources].an_element()) _is _unset 
	_then	
		.custom_args[:circuit_dialog].show_alert(_self.message(:no_circuit_source))
		.custom_args[:circuit_dialog].add_to_log(_self.message(:no_circuit_source))
		
		_return _false 
	_endif
	_if (.custom_args[:cir_source_asset] << l_ckt_src.asset) _is _unset
	_then	
		.custom_args[:circuit_dialog].show_alert(_self.message(:no_asset_for_source))
		.custom_args[:circuit_dialog].add_to_log(_self.message(:no_asset_for_source))
		_return _false 
	_endif
	
	l_ckt_src << .custom_args[:cir_source_asset].circuit_source_stopper
	
	_if l_ckt_src _isnt  _unset 
	_then
		l_ckt << l_ckt_src.eo_circuit
		_if l_ckt _is _unset 
		_then
			write("+++No Circuit Found for Circuit Source +++")
			_return 
		_endif
	_else
		write("+++ No Circuit Source Found +++")
		_return 
	_endif
	
	l_ckt_list << _self.int!build_circuit(.custom_args[:cir_source_asset])
	_if l_ckt_list.size _is 0
	_then
		write("+++ No Downstream Circuits Found for Given Circuit+++")
		_return 
	_endif
	l_ckt_list.add_first(l_ckt)
	
	_for a_ckt  _over l_ckt_list.fast_elements()
	_loop
		.custom_args[:circuit_dialog].add_to_log(_self.message(:lv_processing)+a_ckt.circuit_id)
		l_ckt_engine.run(a_ckt)
		.custom_args[:circuit_dialog].add_to_log(_self.message(:ckt_building_complete)+a_ckt.circuit_id)
	_endloop

_endmethod 
$
_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.int!build_circuit(l_asset)
	## 
	## 
	_local l_con_pt_rec << l_asset
	_local l_ckt_rope
	_local l_network_type << l_asset.network_type
	_local l_sub_coll << .view.collections[:sub_substation]
	_local l_cir << .view.collection(:eo_circuit)
	_local l_cir_sou << .view.collection(:eo_circuit_source)
	_local l_start_obj,l_st_node,l_start_node,b_nodes,b_state,a_follower
	_local l_trace_results,l_cnt_pt_recs,l_pred,l_sub_rec,l_sub_ext
	_local l_bounds,l_scanner,l_cond_rope,l_income_fed,l_node,l_pse_pt,l_cir_src_rec
	_local l_pss_code,l_incom_feeder_code,l_ckt_num,l_dtr_code,l_ckt_id,l_cond,l_rt_insert_ckt_src
	_local l_ckt_prop_list,l_rt_insert_ckt,l_cir_rec,l_ckt_src_prop_list,k_stop_preds,l_geom,l_fd_pred
	
	l_start_obj << l_con_pt_rec
	l_st_node  << l_start_obj.perform(:location).node
	l_start_node << l_st_node
	b_nodes<< equality_set.new_with(l_start_node)
	b_state << cs_network_trace_state.new()
	b_state.manifold_names<< {:elec_trans,:elec_dist_primary,:elec_dist_secondary}
	b_state.direction << :downstream
	b_state.network_state << :future                           
	b_state.obey_normal_status? << _false
	a_follower << eo_trace_engine.new()
	a_follower.parameters[:direction]<< :downstream
	a_follower.parameters[:start_node] << b_nodes           
	a_follower.parameters[:trace_type] << :trace_out
	a_follower.parameters[:mounting] << :all
	a_follower.parameters[:network_state] << :current
	a_follower.parameters[:obey_normal_status?] <<_false            
	a_follower.parameters[:manifolds] << {:elec_trans,:elec_dist_primary,:elec_dist_secondary}
	a_follower.parameters[:max_cost] << _unset 
	a_follower.parameters[:state] << b_state
	a_follower.parameters[:cost_message] << :|direction_trace_cost()|                   
	a_follower.parameters[:via_node_rwo?] << _true 
	a_follower.parameters[:phasing] << "ABCN"
	a_follower.parameters[:include_additional_results?] << _false
	k_stop_preds << a_follower.get_stop_predicates()
	a_follower.parameters[:stop_predicates] << k_stop_preds
	a_follower.launch_trace()
	l_trace_results << a_follower.result_rwo_set()
	
	##Check how many Connector Points exist in the trace
	_if l_network_type ="MV" _andif
	    l_con_pt_rec.nominal_voltage_pp =  unit_value(11.000,:Kv)
	_then
		l_cnt_pt_recs << l_trace_results.select(predicate.eq(:source_table_name,"eo_connector_point_inst") _and
							predicate.eq(:network_type,"LV") _and
							(predicate.eq(:nominal_voltage_pp,unit_value(415.000,:V)) _or
							 predicate.eq(:nominal_voltage_pp,unit_value(240.000,:V))))
		l_ckt_rope << _self.build_lv_circuits(l_cnt_pt_recs)
	_elif l_network_type ="HV"_andif
	      l_con_pt_rec.nominal_voltage_pp =  unit_value(33.000,:Kv)
	_then 
		l_cnt_pt_recs << l_trace_results.select(predicate.eq(:source_table_name,"eo_connector_point_inst") _and
							predicate.eq(:network_type,"MV") _and
							predicate.eq(:nominal_voltage_pp,unit_value(11.000,:Kv)))
		l_ckt_rope << _self.build_mv_circuits(l_cnt_pt_recs)
	_endif
	
	_return l_ckt_rope
	
_endmethod
$


_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.build_lv_circuits(p_cnt_pt_recs)
	## 
	##
	_local l_cnt_pt_recs << p_cnt_pt_recs
	_local l_ckt_rope<< rope.new()
	_local l_sub_coll << .view.collections[:sub_substation]
	_local l_cir << .view.collection(:eo_circuit)
	_local l_cir_sou << .view.collection(:eo_circuit_source)
	_local l_pred,l_sub_rec,l_sub_ext
	_local l_bounds,l_scanner,l_cond_rope,l_income_fed,l_node,l_pse_pt,l_cir_src_rec
	_local l_incoming_feders
	_local l_dtr_code<<"NA"
	_local l_ckt_num << "NA"
	_local l_pss_code <<"NA"
	_local 	l_incom_feeder_code <<"NA"
	
	_for  a_each_con_pnt _over l_cnt_pt_recs.fast_elements()
	_loop
		_if a_each_con_pnt.circuit_source_stopper _isnt _unset 
		_then
			l_ckt_src << a_each_con_pnt.circuit_source_stopper
			_if l_ckt_src _isnt  _unset 
			_then
				l_ckt << l_ckt_src.eo_circuit
				l_ckt_rope.add_last(l_ckt)
			_endif
			
			_continue 
		_endif
		
		l_pred<< predicate.overlays(:extent,a_each_con_pnt.location)
		l_sub_rec << l_sub_coll.select(l_pred).an_element()
		
		_if l_sub_rec _is _unset 
		_then
			write("+++ Connector Point Installation +++",a_each_con_pnt,%tab,"Not within Substation")
			_continue 
		_endif
		
		(l_xfrmrs_feeding_interlinks ,l_incoming_feders)<< _self.get_xfrmr_within_substation(l_sub_rec)
		_if l_incoming_feders.size > 0
		_then
			l_pss_code << l_incoming_feders.an_element().tp_pss_code
			l_incom_feeder_code << l_incoming_feders.an_element().tp_feeder_code
				
		_endif
		
		_for a_each_con_seg,associated_xfrmr _over l_xfrmrs_feeding_interlinks.fast_keys_and_elements()
		_loop
			l_connected_conn_pnt << a_each_con_seg.all_connected_like({eo_connector_point_inst}).an_element()
			
			_if l_connected_conn_pnt _is _unset _orif
			    a_each_con_pnt _is _unset 
			_then
				_continue 
			_endif
			_if associated_xfrmr _is _unset 
			_then
				_continue 
			_endif
			_if l_connected_conn_pnt.id _is a_each_con_pnt.id
			_then
				l_cond << a_each_con_pnt.all_connected_like({eo_cable_segment_inst,eo_wire_segment_inst}).an_element()
				l_ckt_num << l_cond.tp_lt_ckt_number
				l_xfrmr_feeding_conn_pnt << associated_xfrmr
				l_dtr_code << l_xfrmr_feeding_conn_pnt.tp_number
				_leave 
			_endif
			
		_endloop
		
		l_ckt_id << write_string(l_pss_code,"-",l_incom_feeder_code,"-",l_dtr_code,"-",l_ckt_num)
	
		l_ckt_prop_list << property_list.new_with(:circuit_id,l_ckt_id,
							  :tp_nominal_voltage,a_each_con_pnt.nominal_voltage_pp,
							  :tp_network_type,a_each_con_pnt.network_type,
							  :tp_status,a_each_con_pnt.status,
							  :extent_buffer,length_value(0.127,:m))
		
		l_rt_insert_ckt << record_transaction.new_insert(l_cir,l_ckt_prop_list)
		l_cir_rec << l_rt_insert_ckt.run()
		l_ckt_src_prop_list << property_list.new_with(:asset,a_each_con_pnt,
							      :eo_circuit,l_cir_rec)
		l_rt_insert_ckt_src << record_transaction.new_insert(l_cir_sou,l_ckt_src_prop_list)
		l_cir_src_rec << l_rt_insert_ckt_src.run()
		l_ckt_rope.add_last(l_cir_rec)
		
	_endloop
	
	_return l_ckt_rope
_endmethod

$
_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.build_mv_circuits(p_cnt_pt_recs)
	## 
	## 
	_local l_cnt_pt_recs << p_cnt_pt_recs
	_local l_ckt_rope<< rope.new()
	_local l_sub_coll << .view.collections[:sub_substation]
	_local l_cir << .view.collection(:eo_circuit)
	_local l_cir_sou << .view.collection(:eo_circuit_source)
	_local l_pred,l_sub_rec,l_sub_ext
	_local l_scanner,l_cond_rope,l_income_fed,l_node,l_pse_pt,l_cir_src_rec
	_local l_pss_code,l_incom_feeder_code
	_local l_equality_set << equality_set.new()

	_for  a_each_con_pnt _over l_cnt_pt_recs.fast_elements()
	_loop
		_if a_each_con_pnt.circuit_source_stopper _isnt _unset 
		_then
			l_ckt_src << a_each_con_pnt.circuit_source_stopper
			_if l_ckt_src _isnt  _unset 
			_then
				l_ckt << l_ckt_src.eo_circuit
				l_ckt_rope.add_last(l_ckt)
			_endif
			
			_continue 
		_endif
		
		l_pred<< predicate.overlays(:extent,a_each_con_pnt.location)
		l_sub_rec << l_sub_coll.select(l_pred).an_element()
		
		_if l_sub_rec _is _unset 
		_then
			write("+++ Connector Point Installation +++",a_each_con_pnt,%tab,"Not within Substation")
			_continue 
		_endif
		
		l_pss_code << l_sub_rec.tp_code
		l_incom_feeder_code << "NA"
		l_ckt_id << write_string(l_pss_code,"-",l_incom_feeder_code)
		l_cond << a_each_con_pnt.all_connected_like({eo_cable_segment_inst,eo_wire_segment_inst}).an_element()
		
		l_ckt_prop_list << property_list.new_with(:circuit_id,l_ckt_id,
							  :tp_nominal_voltage,a_each_con_pnt.nominal_voltage_pp,
							  :tp_network_type,a_each_con_pnt.network_type,
							  :tp_status,a_each_con_pnt.status,
							  :extent_buffer,length_value(0.127,:m))
		
		l_rt_insert_ckt << record_transaction.new_insert(l_cir,l_ckt_prop_list)
		l_cir_rec << l_rt_insert_ckt.run()
		l_ckt_src_prop_list << property_list.new_with(:asset,a_each_con_pnt,
							      :eo_circuit,l_cir_rec)
		l_rt_insert_ckt_src << record_transaction.new_insert(l_cir_sou,l_ckt_src_prop_list)
		l_cir_src_rec << l_rt_insert_ckt_src.run()
		l_ckt_rope.add_last(l_cir_rec)
		
	_endloop
	
	_return l_ckt_rope
_endmethod
$

_pragma(classify_level=basic,  usage={tp_circuit_builder_engine})
_method tp_circuit_builder_engine.get_xfrmr_within_substation(p_sub_rec)
	## 
	## 
	_local l_sub_rec << p_sub_rec
	_local l_bounds << l_sub_rec.extent.bounds
	_local l_xfrmr_features << rwo_set.new()
	_local l_il_link_features << rwo_set.new()
	_local l_fdr_nd_conn_xfrmr << property_list.new()
	_local l_geom,l_col,l_start_obj,l_start_node,b_nodes,b_state,a_follower,k_stop_preds,l_trace_results,l_xfrmr
	_local l_incoming_feders << rope.new()
	_local l_scanner << .view.geometry_scanner(:general)
	l_scanner.start_scan(l_bounds)
	_loop
		l_geom << l_scanner.get()
		_if l_geom _is _unset _then  _leave _endif

		_if l_geom.rwo_type  _isnt :eo_power_xfrmr_inst _andif
		    l_geom.rwo_type  _isnt :eo_connector_segment_inst _andif
		    l_geom.rwo_type  _isnt :eo_cable_segment_inst _andif
		    l_geom.rwo_type  _isnt :eo_wire_segment_inst
		_then
			_continue 
		_endif
		
		_if l_geom.rwo_type _is  :eo_power_xfrmr_inst 
		_then
			l_xfrmr_features.add(l_geom.rwo)
		_endif
		
		_if l_geom.rwo_type _is :eo_connector_segment_inst _andif
		    l_geom.rwo.device_type = "Internal link"
		_then
			_if _not l_geom.rwo.all_connected_like({eo_cable_segment_inst,eo_wire_segment_inst,eo_connector_point_inst}).empty?
			_then
				l_col << l_geom.rwo.all_connected_like({eo_cable_segment_inst,eo_wire_segment_inst,eo_connector_point_inst}).select(predicate.eq(:network_type,"LV"))
				_if l_col _is _unset _andif
				    _not l_col.empty?
				_then
					l_il_link_features.add(l_geom.rwo)
					
				_endif
			_endif	
		_endif
		
		_if l_geom.rwo_type _is :eo_cable_segment_inst _orif
		    l_geom.rwo_type _is :eo_wire_segment_inst
		_then
			_if  l_geom.rwo.network_type ="MV"
			_then
				l_incoming_feders.add_last(l_geom.rwo)
			_endif
		_endif
		
	_endloop
	
	_for a_lnk _over l_il_link_features.fast_elements()
	_loop
		l_start_obj << a_lnk
		l_start_node << l_start_obj.perform(:route).first_node
		b_nodes<< equality_set.new_with(l_start_node)
		b_state << cs_network_trace_state.new()
		b_state.manifold_names<< {:elec_dist_secondary}
		b_state.direction << :upstream
		b_state.network_state << :future                           
		b_state.obey_normal_status? << _false
		a_follower << eo_trace_engine.new()
		a_follower.parameters[:direction]<< :upstream
		a_follower.parameters[:start_node] << b_nodes           
		a_follower.parameters[:trace_type] << :trace_out
		a_follower.parameters[:mounting] << :all
		a_follower.parameters[:network_state] << :current
		a_follower.parameters[:obey_normal_status?] <<_false            
		a_follower.parameters[:work_order_number] << :all 
		a_follower.parameters[:manifolds] << {:elec_dist_secondary}
		a_follower.parameters[:max_cost] << _unset 
		a_follower.parameters[:state] << b_state
		a_follower.parameters[:cost_message] << :|direction_trace_cost()|                   
		a_follower.parameters[:via_node_rwo?] << _true 
		a_follower.parameters[:phasing] << "ABCN"
		a_follower.parameters[:include_additional_results?] << _false
		k_stop_preds << hash_table.new_with(:eo_power_xfrmr_inst,{predicate.eq(:load_network_type,"LV") _and predicate.eq(:source_network_type,"MV") })
		a_follower.parameters[:stop_predicates] << k_stop_preds
		a_follower.launch_trace()
		l_trace_results << a_follower.result_rwo_set()
		_for a_xfrmr _over l_xfrmr_features.fast_elements()
		_loop
			l_xfrmr << l_trace_results.select(predicate.eq(:source_table_name, "eo_power_xfrmr_inst") _and predicate.eq(:id,a_xfrmr.id))
			_if _not l_xfrmr.empty?
			_then
				l_fdr_nd_conn_xfrmr[a_lnk] << l_xfrmr.an_element()
				_leave
			_endif
			
		_endloop
		
	_endloop
	
	_return l_fdr_nd_conn_xfrmr,l_incoming_feders
_endmethod
$
