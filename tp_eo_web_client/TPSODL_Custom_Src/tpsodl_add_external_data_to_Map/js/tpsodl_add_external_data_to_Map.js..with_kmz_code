/*! ElectricOfficeWeb 5.0.1 2019-12-09 */
define(["jquery", "underscore", "i18n!nls/messages", "hogan", 'map-loader', 'map-helper','map-google',"OpenLayers3", "proj4"], 


function ($, _, messages, hogan, mapdsConfig, mapHelper, google,OpenLayers3,proj4) {
	
	
	"use strict";
	var mapRef,
	mapName,
	n,
	o,
	p = !1,
	q = !1,
		
	init = function () {
		initialise();
	},
	mapInit = function () {
		$("#tpsodl_add_external_data_to_map").css('display','inline')
		$.subscribe("mapInitialised", map)
	},
	map = function (a, b) {
		mapRef = b,
		mapName = a,
		init()
	};
	mapInit();
	
	const zip = new JSZip();
	// const zip1 = new JSZip-load();

	function getKMLData(buffer) {
	  let kmlData;
	  console.log(">> going to load")
	  console.log(buffer);
	  // console.log(zip)
	  zip.load(buffer);
	  const kmlFile = zip.file(buffer);//(/.kml$/i)[0];
	  console.log("kmlFile");
	  console.log(kmlFile);
	  if (kmlFile) {
		kmlData = kmlFile.asText();
	  }
	  return kmlData;
	}

	function getKMLImage(href) {
		console.log("getKMLImage fun")
	  let url = href;
	  let path = window.location.href;
	  path = path.slice(0, path.lastIndexOf('/') + 1);
	  if (href.indexOf(path) === 0) {
		const regexp = new RegExp(href.replace(path, '') + '$', 'i');
		const kmlFile = zip.file(regexp)[0];
		if (kmlFile) {
		  url = URL.createObjectURL(new Blob([kmlFile.asArrayBuffer()]));
		}
	  }
	  return url;
	}

	

	class KMZ extends OpenLayers3.format.KML {
	  constructor(opt_options) {
		console.log("opt_options",opt_options)
		const options = opt_options || {};
		console.log(getKMLImage)
		options.iconUrlFunction = getKMLImage;
		// options.iconUrlFunction = getKMLData;
		
		// console.log(super)
		super(options);
	  }

	  getType() {
		return 'arraybuffer';
	  }

	  readFeature(source, options) {
		  console.log("--------------")
		const kmlData = getKMLData(source);
		return super.readFeature(kmlData, options);
	  }

	  readFeatures(source, options) {
		const kmlData = getKMLData(source);
		return super.readFeatures(kmlData, options);
	  }
	}
	
	var initialise = function () {
		var flag = false;
		var vectorSource1;
		var vectorSource2;
		var vectorSource = [];
		var source = [];
		var dragAndDropInteraction;
		
				
		$("#tpsodl_add_external_data_to_map").click(function () {
			console.log(OpenLayers3.format.KML)
			dragAndDropInteraction = new OpenLayers3.interaction.DragAndDrop({
			  formatConstructors: [ KMZ,
				OpenLayers3.format.GPX,
				OpenLayers3.format.GeoJSON,
				OpenLayers3.format.IGC,
				OpenLayers3.format.KML,
				OpenLayers3.format.TopoJSON
			  ]
			});

			if(flag){
				flag = false;
				$("#map-drag-drop-custom-tools").css("background-color" ,"#62a03c");
				$("#tpsodl_add_external_data_div").css("display","none");
				mapRef.getInteractions().forEach(function(interaction) {
				  if (interaction instanceof OpenLayers3.interaction.DragAndDrop) {
					  mapRef.removeInteraction(interaction);
				  }
				}, this);	
				
				vectorSource.forEach(function (layer, i) {
					layer.clear();
				});
			}
			else{
				flag = true;
				$("#tpsodl_add_external_data_result").empty();
				source =[];	
				mapRef.addInteraction(dragAndDropInteraction);
				$("#map-drag-drop-custom-tools").css("background-color", "#e48313");
			}

			var defaultStyle = {
			  'Point': [new OpenLayers3.style.Style({
                        image: new OpenLayers3.style.Icon(({
                            anchor: [0.5, 46],
                            anchorXUnits: 'fraction',
                            anchorYUnits: 'pixels',
                            opacity: 1,
                            src: './TPSODL_Custom_Src/img/tpsodl_custom_pin.png'
                        }))
                    })],
			  'LineString': [new OpenLayers3.style.Style({
				stroke: new OpenLayers3.style.Stroke({
				  cOpenLayers3or: '#ffa500',//'#f00',
				  color: '#ffa500',//'#f00',
				  width: 3
				})
			  })],
			  // 'POpenLayers3ygon': [new OpenLayers3.style.Style({
				// fill: new OpenLayers3.style.Fill({
				  // cOpenLayers3or: 'rgba(0,255,255,0.5)'
				// }),
				// stroke: new OpenLayers3.style.Stroke({
				  // cOpenLayers3or: '#0ff',
				  // width: 1
				// })
			  // })],
			  'Polygon': [new OpenLayers3.style.Style({
				fill: new OpenLayers3.style.Fill({
				  cOpenLayers3or: '#ffa500',//'Orange',//'rgba(0,255,255,0.5)'
				  color: '#ffa500',//'Orange',//'rgba(0,255,255,0.5)'
				}),
				stroke: new OpenLayers3.style.Stroke({
				  cOpenLayers3or: '#ffa500',//'#00f',
				  color: '#ffa500',//'#00f',
				  width: 1
				})
			  })],
			  'MultiPoint': [new OpenLayers3.style.Style({
                        image: new OpenLayers3.style.Icon(({
                            anchor: [0.5, 46],
                            anchorXUnits: 'fraction',
                            anchorYUnits: 'pixels',
                            opacity: 1,
                            src: './TPSODL_Custom_Src/img/tpsodl_custom_pin.png'
                        }))
                    })],
			  'MultiLineString': [new OpenLayers3.style.Style({
				stroke: new OpenLayers3.style.Stroke({
				  cOpenLayers3or: '#ffa500',//'#0f0',
				  color: '#ffa500',//'#0f0',
				  width: 3
				})
			  })],
			  'MultiPolygon': [new OpenLayers3.style.Style({
				fill: new OpenLayers3.style.Fill({
				  cOpenLayers3or: '#ffa500',//'Orange',//'rgba(0,255,255,0.5)'
				  color: '#ffa500',//'Orange',//'rgba(0,255,255,0.5)'
				}),
				stroke: new OpenLayers3.style.Stroke({
				  cOpenLayers3or: '#ffa500',//'#00f',
				  color: '#ffa500',//'#00f',
				  width: 1
				})
			  })]//,
			  // 'MultiPOpenLayers3ygon': [new OpenLayers3.style.Style({
				// fill: new OpenLayers3.style.Fill({
				  // cOpenLayers3or: 'rgba(0,0,255,0.5)'
				// }),
				// stroke: new OpenLayers3.style.Stroke({
				  // cOpenLayers3or: '#00f',
				  // width: 1
				// })
			  // })]
			};

			var styleFunction = function(feature, resOpenLayers3ution) {
			  var featureStyleFunction = feature.getStyleFunction();
			  if (featureStyleFunction) {
				return featureStyleFunction.call(feature, resOpenLayers3ution);
			  } else {
				return defaultStyle[feature.getGeometry().getType()];
			  }
			};


			dragAndDropInteraction.on('addfeatures', function(event) {
				console.log("addfeatures----")
				$("#tpsodl_add_external_data_div").css("display","block");
				$("#tpsodl_add_external_data_result").append("<lable>"+event.file.name+"</lable></br>");
				if( event.file.name.toLowerCase().endsWith(".kmz") == true ){
					console.log("its KMZ");
					console.log(event)
					if(event.features == undefined || event.features.length <= 0){
						console.log("No features found");
						var l_kmz = new KMZ();
						console.log(l_kmz.readFeatures(event.file.name,undefined))
					}
				}else{
					console.log("Other File");
				}
				source.push(event.file.name);
				// console.log(event)
				vectorSource[source.length -1] = new OpenLayers3.source.Vector({
						features: event.features,
						projection: event.projection,
					});
					vectorSource[source.length -1].set('name', event.file.name);
					mapRef.getLayers().push(new OpenLayers3.layer.Image({
						source: new OpenLayers3.source.ImageVector({
							source: vectorSource[source.length -1],
							style: styleFunction
						})
					}));
					var view = mapRef.getView();
					console.log(vectorSource,source)
					view.fit(
					  vectorSource[source.length -1].getExtent(), /** @type {OpenLayers3.Size} */ (mapRef.getSize()));
			});

			var displayFeatureInfo = function(pixel) {
				// console.log("-displayFeatureInfo---")
			  var features = [];
			  mapRef.forEachFeatureAtPixel(pixel, function(feature, layer) {
				features.push(feature);
			  });
			  if (features.length > 0) {
				var info = [];
				var i, ii;
				for (i = 0, ii = features.length; i < ii; ++i) {
				  info.push(features[i].get('name'));
				}
			  } else {
			  }
			};

			$(mapRef.getViewport()).on('mousemove', function(evt) {
				// console.log("mousemove---")
			  var pixel = mapRef.getEventPixel(evt.originalEvent);
			  displayFeatureInfo(pixel);
			});

			mapRef.on('click', function(evt) {
				// console.log("click---")
			  displayFeatureInfo(evt.pixel);
			});	
			
			
		});		
	}

});
